#include "quickfile.h"
#include <QFileDialog>
#include <QUrl>

/*!
    \qmlclass QuickFile QuickFile
    \brief QuickFile is a quick-and-dirty file handling object that supports file-io that QML/Javascript doesn't.
    \inherits QObject

    The QuickFile element is part of the \c{ModelTweak} namespace,
    so the following must appear at the top of any QML file that
    references it:

    \code
    import ModelTweak 1.0
    \endcode

    \sa QObject
*/

/*!
    \internal
*/
QuickFile::QuickFile(QObject *parent) :
    QObject(parent)
{
}

/*!
    Prompts for a location and filename to save the qml \c{QuickFile::data} generated by ModelTweaker.
    Returns an error message if the file was unsuccessfully saved,
    or an empty string if the save was successful.
*/
QString QuickFile::save() const
{
    QString filename = QFileDialog::getSaveFileName(0, tr("Save QML File"), "",tr("Files (*.qml)"));

    // FIXME: ensure fileName is appropriate as a qml Component
    if (!filename.endsWith(".qml"))
        filename.append(".qml");

    QString modelFilename = QUrl(_filename).toLocalFile();

    QDir outputDir = QFileInfo(filename).absoluteDir();
    QString relativeFilename = outputDir.relativeFilePath(modelFilename);

    QFile file(filename);

    qDebug("Attempting to write: %s", file.fileName().toAscii().constData());

    if (!file.open(QFile::WriteOnly))
        return file.errorString();

    QString dataToWrite = _data.arg(relativeFilename);

    file.write(dataToWrite.toUtf8());

    file.close();

    return QString();
}

/*!
    Prompts for a location to load a model file from and stores it into the the \c{QuickFile::filename}
    variable.
*/
void QuickFile::load()
{
    QString qmlFilename = QFileDialog::getOpenFileName(0, tr("Load File"), "",tr("Model Files (*.*)"));

    setFilename(qmlFilename);
}

QString QuickFile::filename() const {
    return _filename;
}

void QuickFile::setFilename(const QString filename) {
    if (_filename != filename)
        _filename = filename;
    emit filenameChanged(filename);
}

QString QuickFile::data() const {
    return _data;
}

void QuickFile::setData(const QString data) {
    if (_data != data)
        _data = data;
    emit dataChanged(data);
}
