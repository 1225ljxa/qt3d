/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the QtQuick3D documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page index.html
    \title QtQuick3D Reference Documentation
    \keyword QtQuick3D Reference Documentation

    \image qt3d-logo.png

    QtQuick3D adds 3D content to \l{http://qt.nokia.com/qtquick/}{Qt Quick's} cross-platform ability and coding power.
    Developers of fluid user interfaces can now enhance their applications with 3D
    content in the same way icons and pixmaps would be used in a 2D application.

    QtQuick3D is a product resulting from the \l{http://doc.qt.nokia.com/qt3d-snapshot}{Qt3D project}.  Qt3D is a set of powerful
    cross-platform C++ API's for 3D programming using OpenGL.

    QtQuick3D is made up of the QML bindings for Qt3D (called QML3D) plus
    Qt Creator integration, and other supporting tools.  Qt3D may be used to
    extend QtQuick3D by creating new user-defined QML3D items using C++.

    OpenGL hardware was designed for 3D acceleration and QtQuick3D allows applications
    to utilise that 3D hardware fully.

    QtQuick3D is the Qt Quick product for scripting 3D applications in QML. Apps can be
    2D QML applications with a small amount of simple 3D content; through to complex
    3D scenes, containing 3D assets - such as complex 3D models, and shader effects.

    In QtQuick3D scripts are written in QML, and rendered with the power of Qt & C++.

    Qt3D research continues and if the features you're looking for are not in QtQuick3D
    yet you may find them in the \l{http://doc.qt.nokia.com/qt3d-snapshot/index.html}{Qt3D research project}.

    Check the Qt3D research project for upcoming features like \bold{stereoscopic support},
    which will enable your programs to take advantage of special hardware that displays a different image to each eye.
    We are readying QtQuick3D for stereo support and in some places you may see references to it,
    however it is \bold{not supported yet}.

    QtQuick3D displays \bold{3D content} that is \bold{ready to be enhanced} by stereoscopic
    hardware, but out-of-the-box QtQuick3D works just fine on regular non-stereo displays
    and does not require special glasses or displays to use it.

    See the \l{Tutorials and Examples} for an introduction to using QtQuick3D and Qt3D.

    \table 100%
    \header
        \o Getting Started
        \o Functionality Areas
        \o API Reference
    \row
        \o \list
            \o \l{qt3d-building.html}{Building}
            \o \l{qt3d-examples.html}{Tutorials and Examples}
            \o \l{Writing a scene format plug-in for Qt3D}{Scene format plug-ins}
            \o \l{qt3d-contrib.html}{Contributing}
            \o \l{qt3d-acceptance.html}{Acceptance tests}
            \o \l{qt3d-troubleshooting.html}{Troubleshooting Quick3D}
        \endlist

        \o \list
            \o \l{Qt3D Arrays and Vertex Buffers}{Arrays and Vertex Buffers}
            \o \l{Qt3D Geometry}{Geometry Building}
            \o \l{Qt3D Graphics View Integration}{Graphics View Integration}
            \o \l{Qt3D Materials}{Materials}
            \o \l{Qt3D Math}{Mathematical Primitives}
            \o \l{Qt3D Painting}{Painting in 3D}
            \o \l{Qt3D Scene Management}{Scene Management}
            \o \l{Qt3D Texture Handling}{Texture Management}
            \o \l{Qt3D Viewing}{Viewing Widgets}
        \endlist

        \o \list
            \o \l{qt3d-all-classes.html}{All Classes}
            \o \l{All Namespaces}{QGL Namespace}
            \o \l{QtQuick3D for Scripting 3D Apps in QML}{QtQuick3D Elements}
            \o \l{Stock Shapes for QtQuick3D}{QML/3D Stock Shapes}
        \endlist
    \endtable
*/
